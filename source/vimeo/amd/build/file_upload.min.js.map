{"version":3,"file":"file_upload.min.js","sources":["../src/file_upload.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport Config from 'core/config';\nimport Log from 'core/log';\nimport Notification from 'core/notification';\n\nconst upload = async(resource) => {\n    const file = document.querySelector('input[name=\"videofile\"]').files[0];\n    const url = new URL(Config.wwwroot + '/admin/tool/mediatime/index.php');\n    let offset = 0;\n    let response;\n\n    url.searchParams.set('id', resource.id);\n\n    do {\n        const request = new Request(resource.uploadurl, {\n            body: file,\n            headers: {\n                'Tus-Resumable': '1.0.0',\n                'Upload-Offset': String(offset),\n                'Content-Type': 'application/offset+octet-stream'\n            },\n            method: 'PATCH'\n        });\n        response = await fetch(request);\n        document.querySelector('.progress').style.width = (response.headers.get('Upload-Offset') / file.size * 100) + '%';\n        Log.debug(response.headers.get('Upload-Offset'));\n    } while (response.headers.get('Upload-Offset') < file.size);\n    window.location.href = url;\n};\n\nexport default {\n    init: function() {\n        document.body.removeEventListener('click', this.handleClick);\n        document.body.addEventListener('click', this.handleClick);\n    },\n\n    handleClick: function(e) {\n        const button = e.target.closest('button[name=\"upload\"]');\n        if (button) {\n            const file = document.querySelector('input[name=\"videofile\"]').files[0];\n            e.preventDefault();\n            Ajax.call([{\n                args: {\n                    filesize: Number(file.size),\n                    description: document.querySelector('input[name=\"description\"]').value,\n                    name: document.querySelector('input[name=\"name\"]').value,\n                    tags: document.querySelector('input[name=\"tags\"]').value,\n                    title: document.querySelector('input[name=\"title\"]').value\n                },\n                contextid: 1,\n                done: upload,\n                fail: Notification.exception,\n                methodname: 'mediatimesrc_vimeo_create_token'\n            }]);\n            Log.debug(file.size);\n        }\n    }\n};\n"],"names":["upload","async","file","document","querySelector","files","url","URL","Config","wwwroot","response","searchParams","set","resource","id","request","Request","uploadurl","body","headers","String","method","fetch","style","width","get","size","debug","window","location","href","init","removeEventListener","this","handleClick","addEventListener","e","target","closest","preventDefault","call","args","filesize","Number","description","value","name","tags","title","contextid","done","fail","Notification","exception","methodname"],"mappings":"4eAKMA,OAASC,MAAAA,iBACLC,KAAOC,SAASC,cAAc,2BAA2BC,MAAM,GAC/DC,IAAM,IAAIC,IAAIC,gBAAOC,QAAU,uCAEjCC,SAEJJ,IAAIK,aAAaC,IAAI,KAAMC,SAASC,MAEjC,OACOC,QAAU,IAAIC,QAAQH,SAASI,UAAW,CAC5CC,KAAMhB,KACNiB,QAAS,iBACY,wBACAC,OAVhB,kBAWe,mCAEpBC,OAAQ,UAEZX,eAAiBY,MAAMP,SACvBZ,SAASC,cAAc,aAAamB,MAAMC,MAASd,SAASS,QAAQM,IAAI,iBAAmBvB,KAAKwB,KAAO,IAAO,iBAC1GC,MAAMjB,SAASS,QAAQM,IAAI,wBAC1Bf,SAASS,QAAQM,IAAI,iBAAmBvB,KAAKwB,MACtDE,OAAOC,SAASC,KAAOxB,kBAGZ,CACXyB,KAAM,WACF5B,SAASe,KAAKc,oBAAoB,QAASC,KAAKC,aAChD/B,SAASe,KAAKiB,iBAAiB,QAASF,KAAKC,cAGjDA,YAAa,SAASE,MACHA,EAAEC,OAAOC,QAAQ,yBACpB,OACFpC,KAAOC,SAASC,cAAc,2BAA2BC,MAAM,GACrE+B,EAAEG,+BACGC,KAAK,CAAC,CACPC,KAAM,CACFC,SAAUC,OAAOzC,KAAKwB,MACtBkB,YAAazC,SAASC,cAAc,6BAA6ByC,MACjEC,KAAM3C,SAASC,cAAc,sBAAsByC,MACnDE,KAAM5C,SAASC,cAAc,sBAAsByC,MACnDG,MAAO7C,SAASC,cAAc,uBAAuByC,OAEzDI,UAAW,EACXC,KAAMlD,OACNmD,KAAMC,sBAAaC,UACnBC,WAAY,kDAEZ3B,MAAMzB,KAAKwB"}